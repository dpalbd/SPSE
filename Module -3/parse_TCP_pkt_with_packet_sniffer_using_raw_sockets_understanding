# The length of TCP header always lies in the range- [20 bytes , 60 bytes]
# Minimum length of TCP header = 5 x 4 bytes = 20 bytes.
# Maximum length of TCP header = 20 bytes + 40 bytes = 60 bytes.

# https://www.freesoft.org/CIE/Course/Section4/8.htm

#                     TCP Header Format

                                    
#    0                   1                   2                   3   
#    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |          Source Port          |       Destination Port        |
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |                        Sequence Number                        |
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |                    Acknowledgment Number                      |
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |  Data |           |U|A|P|R|S|F|                               |
#   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |
#   |       |           |G|K|H|T|N|N|                               |
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |           Checksum            |         Urgent Pointer        |
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |                    Options                    |    Padding    |
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#   |                             data                              |
#   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#
#                           TCP Header Format

#          Note that one tick mark represents one bit position.



# Source Port: 16 bits
# Destination Port: 16 bits
# Sequence Number: 32 bits
# Acknowledgment Number: 32 bits
# Data Offset: 4 bits
# Reserved: 6 bits
# Control Bits: 6 bits (from left to right):

#    URG:  Urgent Pointer field significant
#   ACK:  Acknowledgment field significant
#    PSH:  Push Function
#    RST:  Reset the connection
#    SYN:  Synchronize sequence numbers
#    FIN:  No more data from sender

# Window: 16 bits
# Checksum: 16 bits
#Urgent Pointer: 16 bits
#Options: variable
#Padding: variable




# https://www.theunterminatedstring.com/python-bits-and-bytes/


# IPv4 header is : !BBHHHBBHLL.

# https://stackoverflow.com/questions/20768107/regarding-struct-unpack-in-python


# https://stackoverflow.com/questions/48833249/understanding-raw-socket-packet-header
# struct.unpack('!BBHHHBBH4s4s')


# Example Ethernet header:

# 0000   3c 4a 92 1f 04 00 74 c6 3b 8d 82 69 08 00 45 00  <J....t.;..i..E.
# 0010   00 3c 0a 24 40 00 40 06 23 76 0a 14 01 0d 01 01  .<.$@.@.#v......
# 0020   01 01 e7 7a 04 d2 a2 5e 0c d2 00 00 00 00 a0 02  ...z...^........
# 0030   72 10 0d 51 00 00 02 04 05 b4 04 02 08 0a 9c d4  r..Q............
#0040   c0 c0 00 00 00 00 01 03 03 07                    ..........
# the 20-byte IPv4 header exists at packet[14:34]. Unpacking it with the above format yields this:

#>>> header = struct.unpack('!BBHHHBBH4s4s', packet[14:34])
#>>> header
#(69, 0, 60, 2596, 16384, 64, 6, 9078, b'\n\x14\x01\r', b'\x01\x01\x01\x01')
#Indices 8 and 9 are the source and destination IP's respectively. Because they are bytes, 
#we can convert them to int and then str to get the IP in string format:

# Note: Python 3 only
#>>> ip_src = '.'.join(map(str, header[8]))  # 10.20.1.13
#>>> ip_dst = '.'.join(map(str, header[9]))  # 1.1.1.1


#https://stackoverflow.com/questions/20768107/regarding-struct-unpack-in-python
# struct ipheader {
# unsigned char ip_hl:4, ip_v:4; /* this means that each member is 4 bits */
# unsigned char ip_tos;
# unsigned short int ip_len;
# unsigned short int ip_id;
# unsigned short int ip_off;
# unsigned char ip_ttl;
# unsigned char ip_p;
# unsigned short int ip_sum;
# unsigned int ip_src;
# unsigned int ip_dst;
# }; 
